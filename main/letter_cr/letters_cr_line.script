require "utils.func"
local Array = require "utils.arrays"
local LevelWords = require "main.levels"
local circleDiametr = 147

local lettersHash = {}

local points = Array({})

local function letters_destroy(letters)
	if letters then
		for _, letter in ipairs(letters) do
			go.delete(letter, true)
		end
	end
end


local function set_letters(self, letters)
	if self.letters_go then 
		letters_destroy(self.letters_go) 
	end
	self.count = 0
	self.letters_go = {}
	if letters then
		self.letters = letters
		for _, v in ipairs(letters) do
			self.count = self.count + 1
			local letter = factory.create("#letter_cr_factory")
			self.letters_go[self.count] = letter
			lettersHash[letter] = v
			msg.post(letter, "set_letter", {letter = v})
		end


		local angle = (2 * math.pi) / self.count
		local pos = go.get_world_position()
		for i = 1, self.count do
			local newAngle = angle * (i - 1)
			local newPos = vmath.vector3(
				pos.x + math.sin(newAngle) * circleDiametr,
				pos.y + math.cos(newAngle) * circleDiametr,
				0.11
			)
			go.set_position(newPos, self.letters_go[i])
		end
	else
		self.letters = nil
	end
end

local function has_letter_touched(self, letter)
	local letter_pos = go.get_world_position(letter)
	local mouse_pos = self.last_m_pos
	local x = mouse_pos.x - letter_pos.x
	local y = mouse_pos.y - letter_pos.y
	local circleRadius = circleDiametr / 3
	return circleRadius^2 >= x^2 + y^2
end

local function destroy_polygon_lines()
	if points:Length() > 0 then
		for _, v in ipairs(points) do
			go.delete(v.point)
			if v.line then
				go.delete(v.line)
			end
		end
		points = Array({})
	end
end

local function update_selectable_letter(self)
	for _, letter in ipairs(self.letters_go) do
		if has_letter_touched(self, letter) then 
			local selected = getProperty(letter, "letter_circle", "selected")
			if selected then
				local i = self.select:LastIndexOf(letter)
				if i < self.select:Length() then 
					local removeds = self.select:Splice(i + 1)
					for _, delLetter in ipairs(removeds) do
						setProperty(delLetter, "letter_circle", "selected", false)
						msg.post(delLetter, "deselectable")
					end
				end
			else
				self.select:Push(letter)
				setProperty(letter, "letter_circle", "selected", true)
				msg.post(letter, "selectable")
			end
		end
	end
end

local function add_point(x, y)
	local position = vmath.vector3(x, y, 0.5)
	local point = factory.create("#point_factory", position)
	points:Push({
		position = position,
		point = point,
		line = nil
	})
end

local function update_points_toSelectable(self, cursor_point)
	destroy_polygon_lines()
	
	for _, letter in ipairs(self.select) do
		local selected = getProperty(letter, "letter_circle", "selected")
		if selected then 
			local position = go.get_world_position(letter)
			add_point(position.x, position.y)
		end
	end
	add_point(cursor_point.x, cursor_point.y)

	for i, point in ipairs(points) do
		if i < points:Length() then
			point.line = factory.create("#line_factory", point.position)
			msg.post(point.line, "set_point_two", {to_point = points[i+1].position})
		end
	end
end

function init(self)
	self.last_m_pos = vmath.vector3(-9999, -9999, 0)
	msg.post(".", "acquire_input_focus")
	set_letters(self, self.letters or {})
end

function update(self)
	if html5 then
		local hasActive = html5.run("jsApp.hasActive ?? 'ERROR'")
		if hasActive == 'false' then
			msg.post(".", "release_input_focus")
			msg.post("/mainmenu", "disable_game")
		end
	end
end

function final(self)
	letters_destroy(self.letters_go)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init_letters") then
		set_letters(self, message.letters)
	end
end

local function not_equ_pos(pos1, pos2)
	return pos1.x ~= pos2.x or pos1.y ~= pos2.y
end

local function complite_word(word)
	local lineWord = LevelWords:getLineWord(word)

	if lineWord then 
		lineWord.active = false

		if LevelWords:isAllComplete() then
			LevelWords:next()
		else
			msg.post(lineWord.line, "view_word", { word = word, good = true })
			html5.run("jsApp.levelAddWord('"..word.."')")
		end
	end
end

function on_input(self, action_id, action)
	if (action_id == hash("touch") and not_equ_pos(self.last_m_pos, action)) or action.released then
		self.last_m_pos.x = action.x
		self.last_m_pos.y = action.y

		if action.pressed then
			if self.select == nil then
				self.select = Array({})
				self.word = ""
			end
		elseif action.released then
			if self.select then
				complite_word(self.word)
				
				msg.post("/select_letters", "init_word", {word = ""})
				for _, letter in ipairs(self.select) do
					setProperty(letter, "letter_circle", "selected", false)
					msg.post(letter, "deselectable")
				end
				self.word = ""
				self.select = nil
				
				destroy_polygon_lines()
			end
		end

		if self.select then
			update_selectable_letter(self)

			update_points_toSelectable(self, action)

			self.word = self.select:Map(function(letter) 
				return lettersHash[letter]
			end):Join("")

			msg.post("/select_letters", "init_word", {word = self.word})
			msg.post("/select_letters", "view_word")
			
		end
	end
end